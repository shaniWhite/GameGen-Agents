<game_plan>
  <overview>A simple version of the classic Pong game, where two players control paddles to hit a ball back and forth, aiming to score points by getting the ball past the opponent's paddle. The game features pausing, clean quitting, and a straightforward user interface.</overview>
  <game_name>Pong Classic</game_name>
  <window_size width="600" height="600"/>
  <mechanics>Players control paddles to hit a ball, with the game allowing for scoring and movement control. The game can be paused or exited cleanly during play.</mechanics>
  <actions>
    <action>Move Paddle Up, W</action>
    <action>Move Paddle Down, S</action>
    <action>Toggle Pause, P</action>
    <action>Exit Game, Escape</action>
  </actions>
  <files>
    <file>
      <name>main.py</name>
      <description>This is the entry point of the game, initializing Pygame and handling the main game loop, which processes events, updates the game state, and renders everything on the screen.
      Functions:
      - main(): Initializes Pygame, creates a Game object, runs the game loop until the game is exited.
      Inputs: None
      Returns: None
      </description>
    </file>
    <file>
      <name>game.py</name>
      <description>This file contains the core logic of the Pong game, managing game mechanics, paddle and ball interactions, and the paused state.
      Functions:
      - __init__(): Initializes the game state, paddles, and ball.
      Inputs: None
      Returns: None
      - handle_events(): Processes user inputs for quitting and toggling pause.
      Inputs: None
      Returns: None
      - update(): Updates paddle and ball positions only if the game is not paused.
      Inputs: None
      Returns: None
      - draw(): Clears the screen and renders paddles and the ball.
      Inputs: None
      Returns: None
      </description>
    </file>
    <file>
      <name>paddle.py</name>
      <description>This file manages the paddle behavior, including movements, input handling, and drawing the paddle on the screen.
      Functions:
      - __init__(self, x, y, width, height): Initializes paddle position and size.
      Inputs: x (int), y (int), width (int), height (int)
      Returns: None
      - update(self, keys): Updates paddle's position based on user input.
      Inputs: keys (list of bools representing the state of the keyboard)
      Returns: None
      - draw(self, surface): Draws the paddle on the given surface.
      Inputs: surface (Pygame Surface)
      Returns: None
      </description>
    </file>
    <file>
      <name>ball.py</name>
      <description>This file manages the ball's behavior including movement, collision detection with paddles and walls, and scoring logic.
      Functions:
      - __init__(self, x, y, radius): Initializes the ball's position and speed.
      Inputs: x (int), y (int), radius (int)
      Returns: None
      - update(self): Updates ball's position and checks for collisions.
      Inputs: None
      Returns: None
      - draw(self, surface): Draws the ball onto the specified surface.
      Inputs: surface (Pygame Surface)
      Returns: None
      </description>
    </file>
  </files>
</game_plan>
<game_plan>
  <overview>Pong Game: A classic two-player arcade game where players control paddles to bounce a ball back and forth, aiming to score points.</overview>
  <game_name>Pong Challenge</game_name>
  <window_size width="600" height="600"/>
  <mechanics>Players control paddles to hit a ball. The game includes pause and exit mechanics.</mechanics>
  <actions>
    <action>Move paddle up, P ARROW</action>
    <action>Move paddle down, DOWN ARROW</action>
    <action>Toggle pause, P</action>
    <action>Exit game, ESCAPE</action>
    <action>Paused, P</action>
    <action>Exit, ESCAPE</action>
  </actions>
  <files>
    <file>
      <name>main.py</name>
      <description>This is the entry point of the game. Initializes Pygame and manages the main game loop, handling events and updating game state.</description>
      <functions>
        <function>
          <name>main</name>
          <inputs>None</inputs>
          <returns>None</returns>
          <description>Starts the game and handles main event loop.</description>
        </function>
      </functions>
    </file>
    <file>
      <name>paddle.py</name>
      <description>Contains the Paddle class that handles paddle behavior, movement, and rendering on the screen.</description>
      <functions>
        <function>
          <name>__init__</name>
          <inputs>x (int), y (int)</inputs>
          <returns>None</returns>
          <description>Initializes the paddle with position.</description>
        </function>
        <function>
          <name>move_up</name>
          <inputs>None</inputs>
          <returns>None</returns>
          <description>Moves the paddle up, constrained within the screen bounds.</description>
        </function>
        <function>
          <name>move_down</name>
          <inputs>None</inputs>
          <returns>None</returns>
          <description>Moves the paddle down, constrained within the screen bounds.</description>
        </function>
        <function>
          <name>draw</name>
          <inputs>surface (pygame.Surface)</inputs>
          <returns>None</returns>
          <description>Renders the paddle on the provided surface.</description>
        </function>
      </functions>
    </file>
    <file>
      <name>ball.py</name>
      <description>Contains the Ball class that manages ball behavior, movement, and interactions with paddles and walls.</description>
      <functions>
        <function>
          <name>__init__</name>
          <inputs>x (int), y (int), speed (int)</inputs>
          <returns>None</returns>
          <description>Initializes the ball with position and speed.</description>
        </function>
        <function>
          <name>update</name>
          <inputs>None</inputs>
          <returns>None</returns>
          <description>Updates the ball's position and checks for collisions with paddles and walls.</description>
        </function>
        <function>
          <name>draw</name>
          <inputs>surface (pygame.Surface)</inputs>
          <returns>None</returns>
          <description>Renders the ball on the provided surface.</description>
        </function>
      </functions>
    </file>
    <file>
      <name>game_state.py</name>
      <description>Manages the global game state, including the paused state and handling user inputs for paddle movements, pausing, and exiting.</description>
      <functions>
        <function>
          <name>__init__</name>
          <inputs>None</inputs>
          <returns>None</returns>
          <description>Initializes paddles, ball, and game state attributes including paused state.</description>
        </function>
        <function>
          <name>handle_input</name>
          <inputs>None</inputs>
          <returns>None</returns>
          <description>Processes user input including paddle movement and pause/exit commands.</description>
        </function>
        <function>
          <name>update</name>
          <inputs>None</inputs>
          <returns>None</returns>
          <description>Updates game logic if the game is not paused.</description>
        </function>
        <function>
          <name>draw</name>
          <inputs>surface (pygame.Surface)</inputs>
          <returns>None</returns>
          <description>Renders paddles, ball, and any game state messages (like pause status).</description>
        </function>
      </functions>
    </file>
  </files>
</game_plan>